// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnlineShopping.Data;

#nullable disable

namespace OnlineShopping.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
<<<<<<<< HEAD:Migrations/20231108055151_createDb.Designer.cs
    [Migration("20231108055151_createDb")]
========
    [Migration("20230829162124_createDb")]
>>>>>>>> 5b0a69d7a9c81e56becf4afd48b7938d77f2faca:Migrations/20230829162124_createDb.Designer.cs
    partial class createDb
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            ConcurrencyStamp = "1",
                            Name = "CUSTOMER",
                            NormalizedName = "CUSTOMER"
                        },
                        new
                        {
                            Id = "2",
                            ConcurrencyStamp = "2",
                            Name = "ASSISTANT",
                            NormalizedName = "ASSISTANT"
                        },
                        new
                        {
                            Id = "3",
                            ConcurrencyStamp = "3",
                            Name = "SHOP_OWNER",
                            NormalizedName = "SHOP_OWNER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            RoleId = "1"
                        },
                        new
                        {
                            UserId = "2",
                            RoleId = "2"
                        },
                        new
                        {
                            UserId = "3",
                            RoleId = "3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OnlineShopping.Models.Address", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"), 1L, 1);

                    b.Property<string>("AddressOwner")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("District")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Provine")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Ward")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("AddressId");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            AddressId = 1,
                            AddressOwner = "USER",
                            District = "District 1",
                            Provine = "Provine 1",
                            Street = "Street 1",
                            Ward = "Commune 1"
                        },
                        new
                        {
                            AddressId = 2,
                            AddressOwner = "REPOSITORY",
                            District = "District 2",
                            Provine = "Provine 2",
                            Street = "Street 2",
                            Ward = "Commune 2"
                        },
                        new
                        {
                            AddressId = 3,
                            AddressOwner = "SUPLIER",
                            District = "District 3",
                            Provine = "Provine 3",
                            Street = "Street 3",
                            Ward = "Commune 3"
                        });
                });

            modelBuilder.Entity("OnlineShopping.Models.Customer.Announcement", b =>
                {
                    b.Property<int>("AnnouncementId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AnnouncementId"), 1L, 1);

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("AnnouncementId");

                    b.HasIndex("UserId");

                    b.ToTable("Announcements");

                    b.HasData(
                        new
                        {
                            AnnouncementId = 1,
                            Content = "Welcome to the furniture shopping website!",
                            CreationDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Welcome",
                            UserId = "1"
                        });
                });

            modelBuilder.Entity("OnlineShopping.Models.Customer.Feedback", b =>
                {
                    b.Property<int>("FeedbackId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackId"), 1L, 1);

                    b.Property<bool>("Anonymous")
                        .HasColumnType("bit");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(120)
                        .HasColumnType("nvarchar(120)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("FurnitureSpecificationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("VoteStar")
                        .HasColumnType("int");

                    b.HasKey("FeedbackId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("FurnitureSpecificationId");

                    b.HasIndex("OrderId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("OnlineShopping.Models.Customer.UserAddress", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<string>("AddressType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "AddressId");

                    b.HasIndex("AddressId");

                    b.ToTable("UserAddresses");

                    b.HasData(
                        new
                        {
                            UserId = "1",
                            AddressId = 1,
                            AddressType = "USER"
                        });
                });

            modelBuilder.Entity("OnlineShopping.Models.Customer.Warranty", b =>
                {
                    b.Property<int>("WarrantyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WarrantyId"), 1L, 1);

                    b.Property<DateTime?>("EstimatedTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("WarrantyReasons")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("WarrantyId");

                    b.HasIndex("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("Warranties");
                });

            modelBuilder.Entity("OnlineShopping.Models.Funiture.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"), 1L, 1);

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Chair"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Table"
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "Bed"
                        });
                });

            modelBuilder.Entity("OnlineShopping.Models.Funiture.Collection", b =>
                {
                    b.Property<int>("CollectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CollectionId"), 1L, 1);

                    b.Property<string>("CollectionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("CollectionId");

                    b.ToTable("Collections");

                    b.HasData(
                        new
                        {
                            CollectionId = 1,
                            CollectionName = "Collection 1"
                        });
                });

            modelBuilder.Entity("OnlineShopping.Models.Funiture.Color", b =>
                {
                    b.Property<int>("ColorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ColorId"), 1L, 1);

                    b.Property<string>("ColorName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("ColorId");

                    b.ToTable("Colors");

                    b.HasData(
                        new
                        {
                            ColorId = 1,
                            ColorName = "Red"
                        },
                        new
                        {
                            ColorId = 2,
                            ColorName = "Green"
                        },
                        new
                        {
                            ColorId = 3,
                            ColorName = "Blue"
                        });
                });

            modelBuilder.Entity("OnlineShopping.Models.Funiture.CustomizeFurniture", b =>
                {
                    b.Property<string>("CustomizeFurnitureId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CustomizeFurnitureName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("DesiredCompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.Property<double>("Length")
                        .HasColumnType("float");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<double>("Width")
                        .HasColumnType("float");

                    b.Property<int>("WoodId")
                        .HasColumnType("int");

                    b.HasKey("CustomizeFurnitureId");

                    b.HasIndex("ColorId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("WoodId");

                    b.ToTable("CustomizeFurnitures");
                });

            modelBuilder.Entity("OnlineShopping.Models.Funiture.Furniture", b =>
                {
                    b.Property<int>("FurnitureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FurnitureId"), 1L, 1);

                    b.Property<string>("AppopriateRoom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("CollectionId")
                        .HasColumnType("int");

                    b.Property<string>("FurnitureName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("LabelId")
                        .HasColumnType("int");

                    b.Property<int>("Like")
                        .HasColumnType("int");

                    b.Property<int>("Sold")
                        .HasColumnType("int");

                    b.Property<double>("VoteStar")
                        .HasColumnType("float");

                    b.HasKey("FurnitureId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CollectionId");

                    b.HasIndex("LabelId");

                    b.ToTable("Furnitures");

                    b.HasData(
                        new
                        {
                            FurnitureId = 1,
                            AppopriateRoom = "Living room",
                            CategoryId = 1,
                            CollectionId = 1,
                            FurnitureName = "Testing Furniture 1",
                            LabelId = 1,
                            Like = 100,
                            Sold = 100,
                            VoteStar = 5.0
                        },
                        new
                        {
                            FurnitureId = 2,
                            AppopriateRoom = "Bed room",
                            CategoryId = 2,
                            CollectionId = 1,
                            FurnitureName = "Testing Furniture 2",
                            LabelId = 2,
                            Like = 10,
                            Sold = 120,
                            VoteStar = 4.5
                        });
                });

            modelBuilder.Entity("OnlineShopping.Models.Funiture.FurnitureSpecification", b =>
                {
                    b.Property<string>("FurnitureSpecificationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("ColorId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FurnitureId")
                        .HasColumnType("int");

                    b.Property<string>("FurnitureSpecificationName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.Property<double>("Length")
                        .HasColumnType("float");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<double>("Width")
                        .HasColumnType("float");

                    b.Property<int?>("WoodId")
                        .HasColumnType("int");

                    b.HasKey("FurnitureSpecificationId");

                    b.HasIndex("ColorId");

                    b.HasIndex("FurnitureId");

                    b.HasIndex("WoodId");

                    b.ToTable("FurnitureSpecifications");

                    b.HasData(
                        new
                        {
                            FurnitureSpecificationId = "FS-3f5d9f11-e8d7-4ca4-9cf8-4ce957368bb4",
                            ColorId = 1,
                            Description = " This is testing decription",
                            FurnitureId = 1,
                            FurnitureSpecificationName = "Yellow",
                            Height = 50.0,
                            Length = 50.0,
                            Price = 50.0,
                            Width = 50.0,
                            WoodId = 1
                        },
                        new
                        {
                            FurnitureSpecificationId = "FS-cd7e8bb9-099b-4da3-ad98-e0fbd49a46d8",
                            ColorId = 2,
                            Description = " This is testing decription",
                            FurnitureId = 1,
                            FurnitureSpecificationName = "Red",
                            Height = 60.0,
                            Length = 40.0,
                            Price = 50.0,
                            Width = 50.0,
                            WoodId = 2
                        },
                        new
                        {
                            FurnitureSpecificationId = "FS-11b65f5a-f776-4dad-bd03-edae7ac2976f",
                            ColorId = 1,
                            Description = " This is testing decription",
                            FurnitureId = 2,
                            FurnitureSpecificationName = "Purple",
                            Height = 30.0,
                            Length = 70.0,
                            Price = 320.0,
                            Width = 20.0,
                            WoodId = 2
                        },
                        new
                        {
                            FurnitureSpecificationId = "FS-8d27ac5a-6c84-403a-9dac-491caa2c8601",
                            ColorId = 2,
                            Description = " This is testing decription",
                            FurnitureId = 2,
                            FurnitureSpecificationName = "Black",
                            Height = 50.0,
                            Length = 30.0,
                            Price = 120.0,
                            Width = 60.0,
                            WoodId = 1
                        });
                });

            modelBuilder.Entity("OnlineShopping.Models.Funiture.Label", b =>
                {
                    b.Property<int>("LabelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LabelId"), 1L, 1);

                    b.Property<string>("LabelName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("LabelId");

                    b.ToTable("Labels");

                    b.HasData(
                        new
                        {
                            LabelId = 1,
                            LabelName = "New"
                        },
                        new
                        {
                            LabelId = 2,
                            LabelName = "Hot Sale"
                        },
                        new
                        {
                            LabelId = 3,
                            LabelName = "Best Saller"
                        });
                });

            modelBuilder.Entity("OnlineShopping.Models.Funiture.Result", b =>
                {
                    b.Property<int>("ResultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResultId"), 1L, 1);

                    b.Property<DateTime?>("ActualCompletionDate")
                        .HasColumnType("datetime2");
<<<<<<<< HEAD:Migrations/20231108055151_createDb.Designer.cs

                    b.Property<string>("CustomizeFurnitureId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<double?>("ExpectedPrice")
                        .HasColumnType("float");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ResultId");

                    b.HasIndex("CustomizeFurnitureId")
                        .IsUnique();

========

                    b.Property<int>("CustomizeFurnitureId")
                        .HasColumnType("int");

                    b.Property<double?>("ExpectedPrice")
                        .HasColumnType("float");

                    b.Property<string>("Reason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ResultId");

                    b.HasIndex("CustomizeFurnitureId")
                        .IsUnique();

>>>>>>>> 5b0a69d7a9c81e56becf4afd48b7938d77f2faca:Migrations/20230829162124_createDb.Designer.cs
                    b.ToTable("Results");
                });

            modelBuilder.Entity("OnlineShopping.Models.Funiture.Wood", b =>
                {
                    b.Property<int>("WoodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WoodId"), 1L, 1);

                    b.Property<string>("WoodType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("WoodId");

                    b.ToTable("Woods");

                    b.HasData(
                        new
                        {
                            WoodId = 1,
                            WoodType = "Cherry"
                        },
                        new
                        {
                            WoodId = 2,
                            WoodType = "Ebony"
                        },
                        new
                        {
                            WoodId = 3,
                            WoodType = "Eucalyptus"
                        });
                });

            modelBuilder.Entity("OnlineShopping.Models.Gallery.CustomizeFurnitureAttachment", b =>
                {
                    b.Property<int>("CustomizeFurnitureAttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomizeFurnitureAttachmentId"), 1L, 1);

                    b.Property<string>("AttachmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

<<<<<<<< HEAD:Migrations/20231108055151_createDb.Designer.cs
                    b.Property<string>("CustomizeFurnitureId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");
========
                    b.Property<int>("CustomizeFurnitureId")
                        .HasColumnType("int");
>>>>>>>> 5b0a69d7a9c81e56becf4afd48b7938d77f2faca:Migrations/20230829162124_createDb.Designer.cs

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustomizeFurnitureAttachmentId");

                    b.HasIndex("CustomizeFurnitureId");

                    b.ToTable("CustomizeFurnitureAttachments");
                });

            modelBuilder.Entity("OnlineShopping.Models.Gallery.FeedbackAttachment", b =>
                {
                    b.Property<int>("FeedbackAttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeedbackAttachmentId"), 1L, 1);

                    b.Property<string>("AttachmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FeedbackId")
                        .HasColumnType("int");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FeedbackAttachmentId");

                    b.HasIndex("FeedbackId");

                    b.ToTable("FeedbackAttachments");
                });

            modelBuilder.Entity("OnlineShopping.Models.Gallery.FurnitureSpecificationAttachment", b =>
                {
                    b.Property<int>("FurnitureSpecificationAttachemnetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FurnitureSpecificationAttachemnetId"), 1L, 1);

                    b.Property<string>("AttachmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

<<<<<<<< HEAD:Migrations/20231108055151_createDb.Designer.cs
                    b.Property<string>("FurnitureSpecificationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");
========
                    b.Property<int>("FurnitureSpecificationId")
                        .HasColumnType("int");
>>>>>>>> 5b0a69d7a9c81e56becf4afd48b7938d77f2faca:Migrations/20230829162124_createDb.Designer.cs

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FurnitureSpecificationAttachemnetId");

                    b.HasIndex("FurnitureSpecificationId");

                    b.ToTable("FurnitureSpecificationAttachments");
                });

            modelBuilder.Entity("OnlineShopping.Models.Gallery.WarrantyAttachment", b =>
                {
                    b.Property<int>("AttachmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AttachmentId"), 1L, 1);

                    b.Property<string>("AttachmentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WarrantyId")
                        .HasColumnType("int");

                    b.HasKey("AttachmentId");

                    b.HasIndex("WarrantyId");

                    b.ToTable("WarrantyAttachments");
<<<<<<<< HEAD:Migrations/20231108055151_createDb.Designer.cs
                });

            modelBuilder.Entity("OnlineShopping.Models.Post", b =>
                {
                    b.Property<int>("PostId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PostId"), 1L, 1);

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LatestUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PostId");

                    b.HasIndex("AuthorId");

                    b.ToTable("Posts");
========
>>>>>>>> 5b0a69d7a9c81e56becf4afd48b7938d77f2faca:Migrations/20230829162124_createDb.Designer.cs
                });

            modelBuilder.Entity("OnlineShopping.Models.Purchase.Cart", b =>
                {
                    b.Property<int>("CartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartId"), 1L, 1);

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CartId");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("OnlineShopping.Models.Purchase.CartDetail", b =>
                {
                    b.Property<int>("CartDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CartDetailId"), 1L, 1);

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<string>("FurnitureSpecificationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("CartDetailId");

                    b.HasIndex("CartId");

                    b.HasIndex("FurnitureSpecificationId");

                    b.ToTable("CartDetails");
                });

            modelBuilder.Entity("OnlineShopping.Models.Purchase.CustomizeFurnitureOrderDetail", b =>
                {
                    b.Property<int>("CustomizeFurnitureOrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomizeFurnitureOrderDetailId"), 1L, 1);

                    b.Property<double>("Cost")
                        .HasColumnType("float");

                    b.Property<string>("CustomizeFunitureId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("CustomizeFurnitureOrderDetailId");

                    b.HasIndex("CustomizeFunitureId");

                    b.HasIndex("OrderId");

                    b.ToTable("CustomizeFurnitureOrderDetails");
                });

            modelBuilder.Entity("OnlineShopping.Models.Purchase.FurnitureOrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderDetailId"), 1L, 1);

                    b.Property<double>("Cost")
                        .HasColumnType("float");

<<<<<<<< HEAD:Migrations/20231108055151_createDb.Designer.cs
                    b.Property<string>("FurnitureSpecificationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");
========
                    b.Property<int>("FurnitureSpecificationId")
                        .HasColumnType("int");
>>>>>>>> 5b0a69d7a9c81e56becf4afd48b7938d77f2faca:Migrations/20230829162124_createDb.Designer.cs

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("FurnitureSpecificationId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("OnlineShopping.Models.Purchase.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"), 1L, 1);

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DeliveryAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsPaid")
                        .HasColumnType("bit");

                    b.Property<string>("Note")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<double>("TotalCost")
                        .HasColumnType("float");

                    b.Property<int?>("UsedPoint")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("PaymentId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("OnlineShopping.Models.Purchase.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentId"), 1L, 1);

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("PaymentId");

                    b.ToTable("Payments");

                    b.HasData(
                        new
                        {
                            PaymentId = 1,
                            PaymentMethod = "CASH"
                        },
                        new
                        {
                            PaymentId = 2,
                            PaymentMethod = "VNPAYQR"
                        },
                        new
                        {
                            PaymentId = 3,
                            PaymentMethod = "VNBANK"
                        },
                        new
                        {
                            PaymentId = 4,
                            PaymentMethod = "INTBANK"
                        });
                });

            modelBuilder.Entity("OnlineShopping.Models.Purchase.PointHistory", b =>
                {
                    b.Property<int>("PointHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PointHistoryId"), 1L, 1);

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("History")
                        .HasColumnType("datetime2");

                    b.HasKey("PointHistoryId");

                    b.HasIndex("CustomerId");

<<<<<<<< HEAD:Migrations/20231108055151_createDb.Designer.cs
                    b.ToTable("PointHistories");
========
                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("Points");

                    b.HasData(
                        new
                        {
                            PointId = 1,
                            CustomerId = "1",
                            Description = "Create account successfully +500 points",
                            History = new DateTime(2023, 8, 29, 23, 21, 24, 352, DateTimeKind.Local).AddTicks(7238),
                            TotalPoint = 500
                        });
>>>>>>>> 5b0a69d7a9c81e56becf4afd48b7938d77f2faca:Migrations/20230829162124_createDb.Designer.cs
                });

            modelBuilder.Entity("OnlineShopping.Models.Purchase.WishList", b =>
                {
                    b.Property<int>("WishlistId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WishlistId"), 1L, 1);

                    b.Property<string>("CustomerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("WishlistId");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("WishLists");
                });

            modelBuilder.Entity("OnlineShopping.Models.Purchase.WishListDetail", b =>
                {
                    b.Property<int>("WishListDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("WishListDetailId"), 1L, 1);

                    b.Property<int>("FurnitureId")
                        .HasColumnType("int");

                    b.Property<int>("WishListId")
                        .HasColumnType("int");

                    b.HasKey("WishListDetailId");

                    b.HasIndex("FurnitureId");

                    b.HasIndex("WishListId");

                    b.ToTable("WishListDetails");
                });

            modelBuilder.Entity("OnlineShopping.Models.Warehouse.FurnitureRepository", b =>
                {
                    b.Property<int>("RepositoryId")
                        .HasColumnType("int");

                    b.Property<string>("FurnitureSpecificationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Available")
                        .HasColumnType("int");

                    b.HasKey("RepositoryId", "FurnitureSpecificationId");

                    b.HasIndex("FurnitureSpecificationId");

                    b.ToTable("FurnitureRepositories");
                });

            modelBuilder.Entity("OnlineShopping.Models.Warehouse.FurnitureRepositoryHistory", b =>
                {
                    b.Property<int>("FurnitureRepositoryHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FurnitureRepositoryHistoryId"), 1L, 1);

                    b.Property<string>("AssistantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("FurnitureSpecificationId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("RepositoryId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FurnitureRepositoryHistoryId");

                    b.HasIndex("AssistantId");

                    b.HasIndex("FurnitureSpecificationId");

                    b.HasIndex("RepositoryId");

                    b.ToTable("FurnitureRepositoryHistories");
                });

            modelBuilder.Entity("OnlineShopping.Models.Warehouse.Import", b =>
                {
                    b.Property<int>("ImportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImportId"), 1L, 1);

                    b.Property<string>("BillImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RepositoryId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ImportId");

                    b.HasIndex("RepositoryId");

                    b.HasIndex("UserId");

                    b.ToTable("Imports");
                });

            modelBuilder.Entity("OnlineShopping.Models.Warehouse.ImportDetail", b =>
                {
                    b.Property<int>("ImportDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImportDetailId"), 1L, 1);

                    b.Property<int>("ImportId")
                        .HasColumnType("int");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ImportDetailId");

                    b.HasIndex("ImportId");

                    b.HasIndex("MaterialId");

                    b.ToTable("ImportDetais");
                });

            modelBuilder.Entity("OnlineShopping.Models.Warehouse.Log", b =>
                {
                    b.Property<int>("LogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogId"), 1L, 1);

                    b.Property<string>("Activity")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LogId");

                    b.HasIndex("UserId");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("OnlineShopping.Models.Warehouse.Material", b =>
                {
                    b.Property<int>("MaterialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaterialId"), 1L, 1);

                    b.Property<int?>("DefaultSuplierId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaterialImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MaterialName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int>("MaterialPrice")
                        .HasColumnType("int");

                    b.HasKey("MaterialId");

                    b.HasIndex("DefaultSuplierId");

                    b.ToTable("Materials");

                    b.HasData(
                        new
                        {
                            MaterialId = 1,
                            DefaultSuplierId = 1,
                            Description = "Material Descriptint 1",
                            MaterialName = "Material 1",
                            MaterialPrice = 5
                        },
                        new
                        {
                            MaterialId = 2,
                            DefaultSuplierId = 1,
                            Description = "Material Descriptint 2",
                            MaterialName = "Material 2",
                            MaterialPrice = 4
                        },
                        new
                        {
                            MaterialId = 3,
                            DefaultSuplierId = 1,
                            Description = "Material Descriptint 3",
                            MaterialName = "Material 3",
                            MaterialPrice = 7
                        });
                });

            modelBuilder.Entity("OnlineShopping.Models.Warehouse.MaterialRepository", b =>
                {
                    b.Property<int>("RepositoryId")
                        .HasColumnType("int");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<int>("Available")
                        .HasColumnType("int");

                    b.HasKey("RepositoryId", "MaterialId");

                    b.HasIndex("MaterialId");

                    b.ToTable("MaterialRepositories");

                    b.HasData(
                        new
                        {
                            RepositoryId = 1,
                            MaterialId = 1,
                            Available = 0
                        },
                        new
                        {
                            RepositoryId = 1,
                            MaterialId = 2,
                            Available = 0
                        },
                        new
                        {
                            RepositoryId = 1,
                            MaterialId = 3,
                            Available = 0
                        });
                });

            modelBuilder.Entity("OnlineShopping.Models.Warehouse.MaterialRepositoryHistory", b =>
                {
                    b.Property<int>("MaterialRepositoryHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaterialRepositoryHistoryId"), 1L, 1);

                    b.Property<string>("AssistantId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int>("MaterialId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("RepositoryId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("MaterialRepositoryHistoryId");

                    b.HasIndex("AssistantId");

                    b.HasIndex("MaterialId");

                    b.HasIndex("RepositoryId");

                    b.ToTable("MaterialRepositoryHistories");
                });

            modelBuilder.Entity("OnlineShopping.Models.Warehouse.Repository", b =>
                {
                    b.Property<int>("RepositoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RepositoryId"), 1L, 1);

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<double>("Capacity")
                        .HasColumnType("float");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsFull")
                        .HasColumnType("bit");

                    b.Property<string>("RepositoryName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("RepositoryId");

                    b.HasIndex("AddressId")
                        .IsUnique();

                    b.ToTable("Repositories");

                    b.HasData(
                        new
                        {
                            RepositoryId = 1,
                            AddressId = 1,
                            Capacity = 50.0,
<<<<<<<< HEAD:Migrations/20231108055151_createDb.Designer.cs
                            CreationDate = new DateTime(2023, 11, 8, 12, 51, 50, 507, DateTimeKind.Local).AddTicks(1608),
                            IsFull = false,
========
                            CreationDate = new DateTime(2023, 8, 29, 23, 21, 24, 354, DateTimeKind.Local).AddTicks(1920),
>>>>>>>> 5b0a69d7a9c81e56becf4afd48b7938d77f2faca:Migrations/20230829162124_createDb.Designer.cs
                            RepositoryName = "Repository 1"
                        });
                });

            modelBuilder.Entity("OnlineShopping.Models.Warehouse.Supplier", b =>
                {
                    b.Property<int>("SupplierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SupplierId"), 1L, 1);

                    b.Property<int>("SupplierAddressId")
                        .HasColumnType("int");

                    b.Property<string>("SupplierEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

<<<<<<<< HEAD:Migrations/20231108055151_createDb.Designer.cs
                    b.Property<string>("SupplierImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupplierName")
========
                    b.Property<string>("SuplierImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SuplierName")
>>>>>>>> 5b0a69d7a9c81e56becf4afd48b7938d77f2faca:Migrations/20230829162124_createDb.Designer.cs
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("SupplierPhoneNums")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SupplierId");

                    b.HasIndex("SupplierAddressId")
                        .IsUnique();

                    b.ToTable("Supliers");

                    b.HasData(
                        new
                        {
                            SupplierId = 1,
                            SupplierAddressId = 3,
                            SupplierEmail = "suplieremail1@gmail.com",
                            SupplierName = "Suplier 1",
                            SupplierPhoneNums = "012334546677"
                        });
                });

            modelBuilder.Entity("OnlineShopping.Models.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("Debit")
                        .HasColumnType("float");

                    b.Property<DateTime?>("DoB")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime?>("LatestUpdate")
                        .HasColumnType("datetime2");

<<<<<<<< HEAD:Migrations/20231108055151_createDb.Designer.cs
                    b.Property<int?>("Point")
                        .HasColumnType("int");

========
>>>>>>>> 5b0a69d7a9c81e56becf4afd48b7938d77f2faca:Migrations/20230829162124_createDb.Designer.cs
                    b.Property<double?>("Spent")
                        .HasColumnType("float");

                    b.HasDiscriminator().HasValue("User");

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
<<<<<<<< HEAD:Migrations/20231108055151_createDb.Designer.cs
                            ConcurrencyStamp = "e63031e1-99ba-4997-8063-53a705ae6902",
========
                            ConcurrencyStamp = "cbd44045-0ca9-4237-99a1-24050eb8d7fd",
>>>>>>>> 5b0a69d7a9c81e56becf4afd48b7938d77f2faca:Migrations/20230829162124_createDb.Designer.cs
                            Email = "customer1@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "customer1",
<<<<<<<< HEAD:Migrations/20231108055151_createDb.Designer.cs
                            PasswordHash = "AQAAAAEAACcQAAAAEDq71Hb9VLJ42/0ZHOCnzjTmq4gCse1mUv/0awkEFLXG4n+lXkfx0Cnks5N7IQpfiw==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "6966498b-6fef-4b96-801f-99df8b3c2946",
                            TwoFactorEnabled = false,
                            UserName = "customer1",
                            Avatar = "",
                            CreationDate = new DateTime(2023, 11, 8, 12, 51, 50, 434, DateTimeKind.Local).AddTicks(644),
========
                            PasswordHash = "AQAAAAEAACcQAAAAEBwU7Zn7BiLGn5y3guGnRzDczwUcbkZyUzmhdYP+SPwUCamBAYIoG4ROng3GEGGncQ==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "17cad0b3-54bc-48d9-b3fb-d09f5a11bb5b",
                            TwoFactorEnabled = false,
                            UserName = "customer1",
                            Avatar = "customer.jpg",
                            CreationDate = new DateTime(2023, 8, 29, 23, 21, 24, 323, DateTimeKind.Local).AddTicks(6341),
>>>>>>>> 5b0a69d7a9c81e56becf4afd48b7938d77f2faca:Migrations/20230829162124_createDb.Designer.cs
                            Debit = 0.0,
                            DoB = new DateTime(2002, 3, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Customer",
                            Gender = "Male",
                            IsActivated = true,
                            LastName = "Customer",
                            Point = 0,
                            Spent = 0.0
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
<<<<<<<< HEAD:Migrations/20231108055151_createDb.Designer.cs
                            ConcurrencyStamp = "3a490559-ac6c-41d6-8ca8-f1025a078ae6",
========
                            ConcurrencyStamp = "5fbe3b83-9d43-4d5b-bd4a-9e3644924bf9",
>>>>>>>> 5b0a69d7a9c81e56becf4afd48b7938d77f2faca:Migrations/20230829162124_createDb.Designer.cs
                            Email = "assistant1@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "assistant1",
<<<<<<<< HEAD:Migrations/20231108055151_createDb.Designer.cs
                            PasswordHash = "AQAAAAEAACcQAAAAEEb0z6vQmzNwdio1hKrnfRV2eSHFpYBtE0b98iWBuCy5ftzd+vSKrHcUo4K/WiZxqg==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "203ffab4-1556-443a-a540-b1e2c2127356",
                            TwoFactorEnabled = false,
                            UserName = "assistant1",
                            Avatar = "",
                            CreationDate = new DateTime(2023, 11, 8, 12, 51, 50, 434, DateTimeKind.Local).AddTicks(733),
========
                            PasswordHash = "AQAAAAEAACcQAAAAEPPPkbBtKoLrpwFfcJwqFDfreD3pfyo1KYjXbWcw2sHxJwGnz7izrLBqmKbL2ApzDA==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ff5fb428-ae2e-48b3-8b09-1846ee7d8cef",
                            TwoFactorEnabled = false,
                            UserName = "assistant1",
                            Avatar = "assistant.jpg",
                            CreationDate = new DateTime(2023, 8, 29, 23, 21, 24, 323, DateTimeKind.Local).AddTicks(6370),
>>>>>>>> 5b0a69d7a9c81e56becf4afd48b7938d77f2faca:Migrations/20230829162124_createDb.Designer.cs
                            Debit = 0.0,
                            DoB = new DateTime(2002, 8, 21, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Assistant",
                            Gender = "Female",
                            IsActivated = true,
                            LastName = "Assistant",
                            Point = 0,
                            Spent = 0.0
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
<<<<<<<< HEAD:Migrations/20231108055151_createDb.Designer.cs
                            ConcurrencyStamp = "bf310ca5-1a62-4c2a-b676-311d2e5b42fa",
========
                            ConcurrencyStamp = "99d76af5-a13a-40ef-8f5b-20b6db043d1b",
>>>>>>>> 5b0a69d7a9c81e56becf4afd48b7938d77f2faca:Migrations/20230829162124_createDb.Designer.cs
                            Email = "manager1@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "manager1",
<<<<<<<< HEAD:Migrations/20231108055151_createDb.Designer.cs
                            PasswordHash = "AQAAAAEAACcQAAAAEPoKI8/rsf3dHAl35hTO7QWUwbag7hj1sO47jS1BRtE8v/2ec8sr+BdM7sPk0GNt5Q==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "61a15692-fdff-4c30-991e-b284f1eed67d",
                            TwoFactorEnabled = false,
                            UserName = "manager1",
                            Avatar = "",
                            CreationDate = new DateTime(2023, 11, 8, 12, 51, 50, 434, DateTimeKind.Local).AddTicks(765),
========
                            PasswordHash = "AQAAAAEAACcQAAAAEEJ7Gln/bW6asVktVGb1M9Kl5vNXbUeakE1ilgP0uj/w7ptVGOeMiOk0ksVHDXDzkg==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "351089ff-175f-4e37-a47e-aaef8cda35e3",
                            TwoFactorEnabled = false,
                            UserName = "manager1",
                            Avatar = "manager.jpg",
                            CreationDate = new DateTime(2023, 8, 29, 23, 21, 24, 323, DateTimeKind.Local).AddTicks(6382),
>>>>>>>> 5b0a69d7a9c81e56becf4afd48b7938d77f2faca:Migrations/20230829162124_createDb.Designer.cs
                            Debit = 0.0,
                            DoB = new DateTime(2000, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Manager",
                            Gender = "Male",
                            IsActivated = true,
                            LastName = "Manager",
<<<<<<<< HEAD:Migrations/20231108055151_createDb.Designer.cs
                            Point = 0,
                            Spent = 0.0
========
                            Spent = 0.0,
                            Status = "Activated"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "29f731f6-82f7-4761-a4a1-6983295c7997",
                            Email = "admin1@gmail.com",
                            EmailConfirmed = false,
                            LockoutEnabled = false,
                            NormalizedUserName = "admin1",
                            PasswordHash = "AQAAAAEAACcQAAAAEL2Q17L4gI0k1O7naEuvB9HjSf0jMV0ZfhvPJXxMQ9L1m56hK+AjLtBJd5vAwkpetQ==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "57749cf3-bc56-4b14-93a4-3b721d20e936",
                            TwoFactorEnabled = false,
                            UserName = "admin1",
                            Avatar = "admin.jpg",
                            CreationDate = new DateTime(2023, 8, 29, 23, 21, 24, 323, DateTimeKind.Local).AddTicks(6391),
                            Debit = 0.0,
                            DoB = new DateTime(2001, 7, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Admin",
                            Gender = "Male",
                            LastName = "Admin",
                            Spent = 0.0,
                            Status = "Activated"
>>>>>>>> 5b0a69d7a9c81e56becf4afd48b7938d77f2faca:Migrations/20230829162124_createDb.Designer.cs
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineShopping.Models.Customer.Announcement", b =>
                {
                    b.HasOne("OnlineShopping.Models.User", "User")
                        .WithMany("Announcements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineShopping.Models.Customer.Feedback", b =>
                {
                    b.HasOne("OnlineShopping.Models.User", "Customer")
                        .WithMany("Feedbacks")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("OnlineShopping.Models.Funiture.FurnitureSpecification", "FurnitureSpecification")
                        .WithMany("Feedbacks")
                        .HasForeignKey("FurnitureSpecificationId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("OnlineShopping.Models.Purchase.Order", "Order")
                        .WithMany("Feedbacks")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("FurnitureSpecification");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("OnlineShopping.Models.Customer.UserAddress", b =>
                {
                    b.HasOne("OnlineShopping.Models.Address", "Address")
                        .WithMany("UserAddresses")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("OnlineShopping.Models.User", "User")
                        .WithMany("UserAddresses")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineShopping.Models.Customer.Warranty", b =>
                {
                    b.HasOne("OnlineShopping.Models.Purchase.Order", "Order")
                        .WithMany("Warranties")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("OnlineShopping.Models.User", "User")
                        .WithMany("Warranties")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineShopping.Models.Funiture.CustomizeFurniture", b =>
                {
                    b.HasOne("OnlineShopping.Models.Funiture.Color", "Color")
                        .WithMany("CustomizeFurnitures")
                        .HasForeignKey("ColorId")
                        .IsRequired();

                    b.HasOne("OnlineShopping.Models.User", "Customer")
                        .WithMany("CustomizeFurnitures")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("OnlineShopping.Models.Funiture.Category", "Category")
                        .WithMany("CustomizeFurnitures")
                        .HasForeignKey("WoodId")
                        .IsRequired();

                    b.HasOne("OnlineShopping.Models.Funiture.Wood", "Wood")
                        .WithMany("CustomizeFurnitures")
                        .HasForeignKey("WoodId")
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Color");

                    b.Navigation("Customer");

                    b.Navigation("Wood");
                });

            modelBuilder.Entity("OnlineShopping.Models.Funiture.Furniture", b =>
                {
                    b.HasOne("OnlineShopping.Models.Funiture.Category", "Category")
                        .WithMany("Furnitures")
                        .HasForeignKey("CategoryId");

                    b.HasOne("OnlineShopping.Models.Funiture.Collection", "Collection")
                        .WithMany("Furnitures")
                        .HasForeignKey("CollectionId");

                    b.HasOne("OnlineShopping.Models.Funiture.Label", "Label")
                        .WithMany("Furnitures")
                        .HasForeignKey("LabelId");

                    b.Navigation("Category");

                    b.Navigation("Collection");

                    b.Navigation("Label");
                });

            modelBuilder.Entity("OnlineShopping.Models.Funiture.FurnitureSpecification", b =>
                {
                    b.HasOne("OnlineShopping.Models.Funiture.Color", "Color")
                        .WithMany("FurnitureSpecifications")
                        .HasForeignKey("ColorId");

                    b.HasOne("OnlineShopping.Models.Funiture.Furniture", "Furniture")
                        .WithMany("FurnitureSpecifications")
                        .HasForeignKey("FurnitureId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("OnlineShopping.Models.Funiture.Wood", "Wood")
                        .WithMany("FurnitureSpecification")
                        .HasForeignKey("WoodId");

                    b.Navigation("Color");

                    b.Navigation("Furniture");

                    b.Navigation("Wood");
                });

            modelBuilder.Entity("OnlineShopping.Models.Funiture.Result", b =>
                {
                    b.HasOne("OnlineShopping.Models.Funiture.CustomizeFurniture", "CustomizeFurniture")
                        .WithOne("Result")
                        .HasForeignKey("OnlineShopping.Models.Funiture.Result", "CustomizeFurnitureId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("CustomizeFurniture");
                });

            modelBuilder.Entity("OnlineShopping.Models.Gallery.CustomizeFurnitureAttachment", b =>
                {
                    b.HasOne("OnlineShopping.Models.Funiture.CustomizeFurniture", "CustomizeFurniture")
                        .WithMany("Attachments")
                        .HasForeignKey("CustomizeFurnitureId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("CustomizeFurniture");
                });

            modelBuilder.Entity("OnlineShopping.Models.Gallery.FeedbackAttachment", b =>
                {
                    b.HasOne("OnlineShopping.Models.Customer.Feedback", "Feedback")
                        .WithMany("Attachements")
                        .HasForeignKey("FeedbackId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Feedback");
                });

            modelBuilder.Entity("OnlineShopping.Models.Gallery.FurnitureSpecificationAttachment", b =>
                {
                    b.HasOne("OnlineShopping.Models.Funiture.FurnitureSpecification", "FurnitureSpecification")
                        .WithMany("Attachments")
                        .HasForeignKey("FurnitureSpecificationId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("FurnitureSpecification");
                });

            modelBuilder.Entity("OnlineShopping.Models.Gallery.WarrantyAttachment", b =>
                {
                    b.HasOne("OnlineShopping.Models.Customer.Warranty", "Warranty")
                        .WithMany("Attachments")
                        .HasForeignKey("WarrantyId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Warranty");
<<<<<<<< HEAD:Migrations/20231108055151_createDb.Designer.cs
                });

            modelBuilder.Entity("OnlineShopping.Models.Post", b =>
                {
                    b.HasOne("OnlineShopping.Models.User", "Author")
                        .WithMany("Posts")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Author");
========
>>>>>>>> 5b0a69d7a9c81e56becf4afd48b7938d77f2faca:Migrations/20230829162124_createDb.Designer.cs
                });

            modelBuilder.Entity("OnlineShopping.Models.Purchase.Cart", b =>
                {
                    b.HasOne("OnlineShopping.Models.User", "Customer")
                        .WithOne("Cart")
                        .HasForeignKey("OnlineShopping.Models.Purchase.Cart", "CustomerId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("OnlineShopping.Models.Purchase.CartDetail", b =>
                {
                    b.HasOne("OnlineShopping.Models.Purchase.Cart", "Cart")
                        .WithMany("CartDetails")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("OnlineShopping.Models.Funiture.FurnitureSpecification", "FurnitureSpecifition")
                        .WithMany("CartDetails")
                        .HasForeignKey("FurnitureSpecificationId")
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("FurnitureSpecifition");
                });

            modelBuilder.Entity("OnlineShopping.Models.Purchase.CustomizeFurnitureOrderDetail", b =>
                {
                    b.HasOne("OnlineShopping.Models.Funiture.CustomizeFurniture", "CustomizeFurniture")
                        .WithMany("CustomizeFurnitureOrderDetails")
                        .HasForeignKey("CustomizeFunitureId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("OnlineShopping.Models.Purchase.Order", "Order")
                        .WithMany("CustomizeFurnitureOrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomizeFurniture");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("OnlineShopping.Models.Purchase.FurnitureOrderDetail", b =>
                {
                    b.HasOne("OnlineShopping.Models.Funiture.FurnitureSpecification", "FurnitureSpecification")
                        .WithMany("FurnitureOrderDetails")
                        .HasForeignKey("FurnitureSpecificationId")
                        .IsRequired();

                    b.HasOne("OnlineShopping.Models.Purchase.Order", "Order")
                        .WithMany("FurnitureOrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("FurnitureSpecification");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("OnlineShopping.Models.Purchase.Order", b =>
                {
                    b.HasOne("OnlineShopping.Models.User", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("OnlineShopping.Models.Purchase.Payment", "Payment")
                        .WithMany("Orders")
                        .HasForeignKey("PaymentId")
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("OnlineShopping.Models.Purchase.PointHistory", b =>
                {
                    b.HasOne("OnlineShopping.Models.User", "User")
                        .WithMany("PointHistories")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineShopping.Models.Purchase.WishList", b =>
                {
                    b.HasOne("OnlineShopping.Models.User", "Customer")
                        .WithOne("WishList")
                        .HasForeignKey("OnlineShopping.Models.Purchase.WishList", "CustomerId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("OnlineShopping.Models.Purchase.WishListDetail", b =>
                {
                    b.HasOne("OnlineShopping.Models.Funiture.Furniture", "Furniture")
                        .WithMany("WishListDetails")
                        .HasForeignKey("FurnitureId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("OnlineShopping.Models.Purchase.WishList", "WishList")
                        .WithMany("WishListDetails")
                        .HasForeignKey("WishListId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Furniture");

                    b.Navigation("WishList");
                });

            modelBuilder.Entity("OnlineShopping.Models.Warehouse.FurnitureRepository", b =>
                {
                    b.HasOne("OnlineShopping.Models.Funiture.FurnitureSpecification", "FurnitureSpecification")
                        .WithMany("FurnitureRepositories")
                        .HasForeignKey("FurnitureSpecificationId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("OnlineShopping.Models.Warehouse.Repository", "Repository")
                        .WithMany("FurnitureRepositories")
                        .HasForeignKey("RepositoryId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("FurnitureSpecification");

                    b.Navigation("Repository");
                });

            modelBuilder.Entity("OnlineShopping.Models.Warehouse.FurnitureRepositoryHistory", b =>
                {
                    b.HasOne("OnlineShopping.Models.User", "Assistant")
                        .WithMany("FurnitureRepositoryHistories")
                        .HasForeignKey("AssistantId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("OnlineShopping.Models.Funiture.FurnitureSpecification", "FurnitureSpecification")
                        .WithMany("FurnitureRepositoryHistories")
                        .HasForeignKey("FurnitureSpecificationId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("OnlineShopping.Models.Warehouse.Repository", "Repository")
                        .WithMany("FurnitureRepositoryHistories")
                        .HasForeignKey("RepositoryId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Assistant");

                    b.Navigation("FurnitureSpecification");

                    b.Navigation("Repository");
                });

            modelBuilder.Entity("OnlineShopping.Models.Warehouse.Import", b =>
                {
                    b.HasOne("OnlineShopping.Models.Warehouse.Repository", "Repository")
                        .WithMany("Imports")
                        .HasForeignKey("RepositoryId")
                        .OnDelete(DeleteBehavior.ClientNoAction)
                        .IsRequired();

                    b.HasOne("OnlineShopping.Models.User", "User")
                        .WithMany("Imports")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Repository");

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineShopping.Models.Warehouse.ImportDetail", b =>
                {
                    b.HasOne("OnlineShopping.Models.Warehouse.Import", "Import")
                        .WithMany("ImportDetails")
                        .HasForeignKey("ImportId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("OnlineShopping.Models.Warehouse.Material", "Material")
                        .WithMany("ImportDetails")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Import");

                    b.Navigation("Material");
                });

            modelBuilder.Entity("OnlineShopping.Models.Warehouse.Log", b =>
                {
                    b.HasOne("OnlineShopping.Models.User", "User")
                        .WithMany("Logs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("OnlineShopping.Models.Warehouse.Material", b =>
                {
                    b.HasOne("OnlineShopping.Models.Warehouse.Supplier", "DefaultSuplier")
                        .WithMany("Materials")
                        .HasForeignKey("DefaultSuplierId");

                    b.Navigation("DefaultSuplier");
                });

            modelBuilder.Entity("OnlineShopping.Models.Warehouse.MaterialRepository", b =>
                {
                    b.HasOne("OnlineShopping.Models.Warehouse.Material", "Material")
                        .WithMany("MaterialRepositories")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("OnlineShopping.Models.Warehouse.Repository", "Repository")
                        .WithMany("MaterialRepositories")
                        .HasForeignKey("RepositoryId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Material");

                    b.Navigation("Repository");
                });

            modelBuilder.Entity("OnlineShopping.Models.Warehouse.MaterialRepositoryHistory", b =>
                {
                    b.HasOne("OnlineShopping.Models.User", "Assistant")
                        .WithMany("MaterialRepositoryHistories")
                        .HasForeignKey("AssistantId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("OnlineShopping.Models.Warehouse.Material", "Material")
                        .WithMany("MaterialRepositoryHistories")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.HasOne("OnlineShopping.Models.Warehouse.Repository", "Repository")
                        .WithMany("MaterialRepositoryHistories")
                        .HasForeignKey("RepositoryId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("Assistant");

                    b.Navigation("Material");

                    b.Navigation("Repository");
                });

            modelBuilder.Entity("OnlineShopping.Models.Warehouse.Repository", b =>
                {
                    b.HasOne("OnlineShopping.Models.Address", "Address")
                        .WithOne("Repository")
                        .HasForeignKey("OnlineShopping.Models.Warehouse.Repository", "AddressId")
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("OnlineShopping.Models.Warehouse.Supplier", b =>
                {
                    b.HasOne("OnlineShopping.Models.Address", "Address")
                        .WithOne("Supplier")
                        .HasForeignKey("OnlineShopping.Models.Warehouse.Supplier", "SupplierAddressId")
                        .IsRequired();

                    b.Navigation("Address");
                });

            modelBuilder.Entity("OnlineShopping.Models.Address", b =>
                {
                    b.Navigation("Repository");

                    b.Navigation("Supplier");

                    b.Navigation("UserAddresses");
                });

            modelBuilder.Entity("OnlineShopping.Models.Customer.Feedback", b =>
                {
                    b.Navigation("Attachements");
                });

            modelBuilder.Entity("OnlineShopping.Models.Customer.Warranty", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("OnlineShopping.Models.Funiture.Category", b =>
                {
                    b.Navigation("CustomizeFurnitures");

                    b.Navigation("Furnitures");
                });

            modelBuilder.Entity("OnlineShopping.Models.Funiture.Collection", b =>
                {
                    b.Navigation("Furnitures");
                });

            modelBuilder.Entity("OnlineShopping.Models.Funiture.Color", b =>
                {
                    b.Navigation("CustomizeFurnitures");

                    b.Navigation("FurnitureSpecifications");
                });

            modelBuilder.Entity("OnlineShopping.Models.Funiture.CustomizeFurniture", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("CustomizeFurnitureOrderDetails");

                    b.Navigation("Result")
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineShopping.Models.Funiture.Furniture", b =>
                {
                    b.Navigation("FurnitureSpecifications");

                    b.Navigation("WishListDetails");
                });

            modelBuilder.Entity("OnlineShopping.Models.Funiture.FurnitureSpecification", b =>
                {
                    b.Navigation("Attachments");

                    b.Navigation("CartDetails");

                    b.Navigation("Feedbacks");

                    b.Navigation("FurnitureOrderDetails");

                    b.Navigation("FurnitureRepositories");

                    b.Navigation("FurnitureRepositoryHistories");
                });

            modelBuilder.Entity("OnlineShopping.Models.Funiture.Label", b =>
                {
                    b.Navigation("Furnitures");
                });

            modelBuilder.Entity("OnlineShopping.Models.Funiture.Wood", b =>
                {
                    b.Navigation("CustomizeFurnitures");

                    b.Navigation("FurnitureSpecification");
                });

            modelBuilder.Entity("OnlineShopping.Models.Purchase.Cart", b =>
                {
                    b.Navigation("CartDetails");
                });

            modelBuilder.Entity("OnlineShopping.Models.Purchase.Order", b =>
                {
                    b.Navigation("CustomizeFurnitureOrderDetails");

                    b.Navigation("Feedbacks");

                    b.Navigation("FurnitureOrderDetails");

                    b.Navigation("Warranties");
                });

            modelBuilder.Entity("OnlineShopping.Models.Purchase.Payment", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("OnlineShopping.Models.Purchase.WishList", b =>
                {
                    b.Navigation("WishListDetails");
                });

            modelBuilder.Entity("OnlineShopping.Models.Warehouse.Import", b =>
                {
                    b.Navigation("ImportDetails");
                });

            modelBuilder.Entity("OnlineShopping.Models.Warehouse.Material", b =>
                {
                    b.Navigation("ImportDetails");

                    b.Navigation("MaterialRepositories");

                    b.Navigation("MaterialRepositoryHistories");
                });

            modelBuilder.Entity("OnlineShopping.Models.Warehouse.Repository", b =>
                {
                    b.Navigation("FurnitureRepositories");

                    b.Navigation("FurnitureRepositoryHistories");

                    b.Navigation("Imports");

                    b.Navigation("MaterialRepositories");

                    b.Navigation("MaterialRepositoryHistories");
                });

            modelBuilder.Entity("OnlineShopping.Models.Warehouse.Supplier", b =>
                {
                    b.Navigation("Materials");
                });

            modelBuilder.Entity("OnlineShopping.Models.User", b =>
                {
                    b.Navigation("Announcements");

                    b.Navigation("Cart");

                    b.Navigation("CustomizeFurnitures");

                    b.Navigation("Feedbacks");

                    b.Navigation("FurnitureRepositoryHistories");

                    b.Navigation("Imports");

                    b.Navigation("Logs");

                    b.Navigation("MaterialRepositoryHistories");

                    b.Navigation("Orders");

                    b.Navigation("PointHistories");

                    b.Navigation("Posts");

                    b.Navigation("UserAddresses");

                    b.Navigation("Warranties");

                    b.Navigation("WishList");
                });
#pragma warning restore 612, 618
        }
    }
}
